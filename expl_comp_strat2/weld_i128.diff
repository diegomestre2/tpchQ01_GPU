diff --git a/tests/integration_tests.rs b/tests/integration_tests.rs
index 5bf43b0..3b0312e 100644
--- a/tests/integration_tests.rs
+++ b/tests/integration_tests.rs
@@ -122,6 +122,17 @@ fn basic_program() {
     unsafe { weld_value_free(ret_value) };
 }
 
+fn basic_program_i128() {
+    let code = "|| 40X + 2X";
+    let conf = default_conf();
+
+    let ref input_data = 0;
+
+    let ret_value = compile_and_run(code, conf, input_data);
+
+    unsafe { weld_value_free(ret_value) };
+}
+
 fn negation() {
     let code = "|| -1";
     let conf = default_conf();
@@ -1466,6 +1477,7 @@ fn main() {
     let args: Vec<String> = env::args().collect();
     let tests: Vec<(&str, fn())> =
         vec![("basic_program", basic_program),
+             ("basic_program_i128", basic_program_i128),
              ("negation", negation),
              ("negation_double", negation_double),
              ("negated_arithmetic", negated_arithmetic),
diff --git a/weld/ast.rs b/weld/ast.rs
index 11afaae..69d4c29 100644
--- a/weld/ast.rs
+++ b/weld/ast.rs
@@ -55,6 +55,7 @@ pub enum ScalarKind {
     I8,
     I32,
     I64,
+    I128,
     F32,
     F64,
 }
@@ -67,6 +68,7 @@ impl fmt::Display for ScalarKind {
             I8 => "i8",
             I32 => "i32",
             I64 => "i64",
+            I128 => "i128",
             F32 => "f32",
             F64 => "f64",
         };
@@ -362,6 +364,7 @@ pub enum LiteralKind {
     I8Literal(i8),
     I32Literal(i32),
     I64Literal(i64),
+    I128Literal(i64),
     F32Literal(f32),
     F64Literal(f64),
 }
diff --git a/weld/exprs.rs b/weld/exprs.rs
index 8a46db5..32b9bb3 100644
--- a/weld/exprs.rs
+++ b/weld/exprs.rs
@@ -22,6 +22,7 @@ pub fn literal_expr(kind: LiteralKind) -> WeldResult<Expr<Type>> {
                         I8Literal(_) => ScalarKind::I8,
                         I32Literal(_) => ScalarKind::I32,
                         I64Literal(_) => ScalarKind::I64,
+                        I128Literal(_) => ScalarKind::I128,
                         F32Literal(_) => ScalarKind::F32,
                         F64Literal(_) => ScalarKind::F64,
                     }))
diff --git a/weld/llvm.rs b/weld/llvm.rs
index 876f5d1..77a131a 100644
--- a/weld/llvm.rs
+++ b/weld/llvm.rs
@@ -811,6 +811,7 @@ impl LlvmGenerator {
             Scalar(I8) => Ok("i8"),
             Scalar(I32) => Ok("i32"),
             Scalar(I64) => Ok("i64"),
+            Scalar(I128) => Ok("i128"),
             Scalar(F32) => Ok("float"),
             Scalar(F64) => Ok("double"),
 
@@ -1690,6 +1691,10 @@ impl LlvmGenerator {
                                 ctx.code
                                     .add(format!("store i64 {}, i64* {}", l, llvm_symbol(output)))
                             }
+                            I128Literal(l) => {
+                                ctx.code
+                                    .add(format!("store i128 {}, i128* {}", l, llvm_symbol(output)))
+                            }
                             F32Literal(l) => {
                                 ctx.code
                                     .add(format!("store float {:.3}, float* {}",
@@ -2560,24 +2565,28 @@ fn llvm_binop(op_kind: BinOpKind, ty: &Type) -> WeldResult<&'static str> {
         (BinOpKind::Add, &Scalar(I8)) => Ok("add"),
         (BinOpKind::Add, &Scalar(I32)) => Ok("add"),
         (BinOpKind::Add, &Scalar(I64)) => Ok("add"),
+        (BinOpKind::Add, &Scalar(I128)) => Ok("add"),
         (BinOpKind::Add, &Scalar(F32)) => Ok("fadd"),
         (BinOpKind::Add, &Scalar(F64)) => Ok("fadd"),
 
         (BinOpKind::Subtract, &Scalar(I8)) => Ok("sub"),
         (BinOpKind::Subtract, &Scalar(I32)) => Ok("sub"),
         (BinOpKind::Subtract, &Scalar(I64)) => Ok("sub"),
+        (BinOpKind::Subtract, &Scalar(I128)) => Ok("sub"),
         (BinOpKind::Subtract, &Scalar(F32)) => Ok("fsub"),
         (BinOpKind::Subtract, &Scalar(F64)) => Ok("fsub"),
 
         (BinOpKind::Multiply, &Scalar(I8)) => Ok("mul"),
         (BinOpKind::Multiply, &Scalar(I32)) => Ok("mul"),
         (BinOpKind::Multiply, &Scalar(I64)) => Ok("mul"),
+        (BinOpKind::Multiply, &Scalar(I128)) => Ok("mul"),
         (BinOpKind::Multiply, &Scalar(F32)) => Ok("fmul"),
         (BinOpKind::Multiply, &Scalar(F64)) => Ok("fmul"),
 
         (BinOpKind::Divide, &Scalar(I8)) => Ok("sdiv"),
         (BinOpKind::Divide, &Scalar(I32)) => Ok("sdiv"),
         (BinOpKind::Divide, &Scalar(I64)) => Ok("sdiv"),
+        (BinOpKind::Divide, &Scalar(I128)) => Ok("sdiv"),
         (BinOpKind::Divide, &Scalar(F32)) => Ok("fdiv"),
         (BinOpKind::Divide, &Scalar(F64)) => Ok("fdiv"),
 
@@ -2585,6 +2594,7 @@ fn llvm_binop(op_kind: BinOpKind, ty: &Type) -> WeldResult<&'static str> {
         (BinOpKind::Equal, &Scalar(I8)) => Ok("icmp eq"),
         (BinOpKind::Equal, &Scalar(I32)) => Ok("icmp eq"),
         (BinOpKind::Equal, &Scalar(I64)) => Ok("icmp eq"),
+        (BinOpKind::Equal, &Scalar(I128)) => Ok("icmp eq"),
         (BinOpKind::Equal, &Scalar(F32)) => Ok("fcmp oeq"),
         (BinOpKind::Equal, &Scalar(F64)) => Ok("fcmp oeq"),
 
@@ -2592,30 +2602,35 @@ fn llvm_binop(op_kind: BinOpKind, ty: &Type) -> WeldResult<&'static str> {
         (BinOpKind::NotEqual, &Scalar(I8)) => Ok("icmp ne"),
         (BinOpKind::NotEqual, &Scalar(I32)) => Ok("icmp ne"),
         (BinOpKind::NotEqual, &Scalar(I64)) => Ok("icmp ne"),
+        (BinOpKind::NotEqual, &Scalar(I128)) => Ok("icmp ne"),
         (BinOpKind::NotEqual, &Scalar(F32)) => Ok("fcmp one"),
         (BinOpKind::NotEqual, &Scalar(F64)) => Ok("fcmp one"),
 
         (BinOpKind::LessThan, &Scalar(I8)) => Ok("icmp slt"),
         (BinOpKind::LessThan, &Scalar(I32)) => Ok("icmp slt"),
         (BinOpKind::LessThan, &Scalar(I64)) => Ok("icmp slt"),
+        (BinOpKind::LessThan, &Scalar(I128)) => Ok("icmp slt"),
         (BinOpKind::LessThan, &Scalar(F32)) => Ok("fcmp olt"),
         (BinOpKind::LessThan, &Scalar(F64)) => Ok("fcmp olt"),
 
         (BinOpKind::LessThanOrEqual, &Scalar(I8)) => Ok("icmp sle"),
         (BinOpKind::LessThanOrEqual, &Scalar(I32)) => Ok("icmp sle"),
         (BinOpKind::LessThanOrEqual, &Scalar(I64)) => Ok("icmp sle"),
+        (BinOpKind::LessThanOrEqual, &Scalar(I128)) => Ok("icmp sle"),
         (BinOpKind::LessThanOrEqual, &Scalar(F32)) => Ok("fcmp ole"),
         (BinOpKind::LessThanOrEqual, &Scalar(F64)) => Ok("fcmp ole"),
 
         (BinOpKind::GreaterThan, &Scalar(I8)) => Ok("icmp sgt"),
         (BinOpKind::GreaterThan, &Scalar(I32)) => Ok("icmp sgt"),
         (BinOpKind::GreaterThan, &Scalar(I64)) => Ok("icmp sgt"),
+        (BinOpKind::GreaterThan, &Scalar(I128)) => Ok("icmp sgt"),
         (BinOpKind::GreaterThan, &Scalar(F32)) => Ok("fcmp ogt"),
         (BinOpKind::GreaterThan, &Scalar(F64)) => Ok("fcmp ogt"),
 
         (BinOpKind::GreaterThanOrEqual, &Scalar(I8)) => Ok("icmp sge"),
         (BinOpKind::GreaterThanOrEqual, &Scalar(I32)) => Ok("icmp sge"),
         (BinOpKind::GreaterThanOrEqual, &Scalar(I64)) => Ok("icmp sge"),
+        (BinOpKind::GreaterThanOrEqual, &Scalar(I128)) => Ok("icmp sge"),
         (BinOpKind::GreaterThanOrEqual, &Scalar(F32)) => Ok("fcmp oge"),
         (BinOpKind::GreaterThanOrEqual, &Scalar(F64)) => Ok("fcmp oge"),
 
@@ -2624,17 +2639,20 @@ fn llvm_binop(op_kind: BinOpKind, ty: &Type) -> WeldResult<&'static str> {
         (BinOpKind::BitwiseAnd, &Scalar(I8)) => Ok("and"),
         (BinOpKind::BitwiseAnd, &Scalar(I32)) => Ok("and"),
         (BinOpKind::BitwiseAnd, &Scalar(I64)) => Ok("and"),
+        (BinOpKind::BitwiseAnd, &Scalar(I128)) => Ok("and"),
 
         (BinOpKind::LogicalOr, &Scalar(Bool)) => Ok("or"),
         (BinOpKind::BitwiseOr, &Scalar(Bool)) => Ok("or"),
         (BinOpKind::BitwiseOr, &Scalar(I8)) => Ok("or"),
         (BinOpKind::BitwiseOr, &Scalar(I32)) => Ok("or"),
         (BinOpKind::BitwiseOr, &Scalar(I64)) => Ok("or"),
+        (BinOpKind::BitwiseOr, &Scalar(I128)) => Ok("or"),
 
         (BinOpKind::Xor, &Scalar(Bool)) => Ok("xor"),
         (BinOpKind::Xor, &Scalar(I8)) => Ok("xor"),
         (BinOpKind::Xor, &Scalar(I32)) => Ok("xor"),
         (BinOpKind::Xor, &Scalar(I64)) => Ok("xor"),
+        (BinOpKind::Xor, &Scalar(I128)) => Ok("xor"),
 
         _ => weld_err!("Unsupported binary op: {} on {}", op_kind, print_type(ty)),
     }
@@ -2654,7 +2672,7 @@ fn llvm_binop_vector(op_kind: BinOpKind, ty: &Type) -> WeldResult<(&'static str,
     }
 }
 
-/// Return the name of hte LLVM instruction for a cast operation between specific types.
+/// Return the name of the LLVM instruction for a cast operation between specific types.
 fn llvm_castop(ty1: &Type, ty2: &Type) -> WeldResult<&'static str> {
     match (ty1, ty2) {
         (&Scalar(F64), &Scalar(Bool)) => Ok("fptoui"),
@@ -2668,7 +2686,9 @@ fn llvm_castop(ty1: &Type, ty2: &Type) -> WeldResult<&'static str> {
         (_, &Scalar(F64)) => Ok("sitofp"),
         (_, &Scalar(F32)) => Ok("sitofp"),
         (&Scalar(Bool), _) => Ok("zext"),
+        (_, &Scalar(I32)) => Ok("sext"),
         (_, &Scalar(I64)) => Ok("sext"),
+        (_, &Scalar(I128)) => Ok("sext"),
         _ => Ok("trunc"),
     }
 }
diff --git a/weld/parser.rs b/weld/parser.rs
index 8bd7256..0beddf4 100644
--- a/weld/parser.rs
+++ b/weld/parser.rs
@@ -596,6 +596,7 @@ impl<'t> Parser<'t> {
         match *self.next() {
             TI32Literal(v) => Ok(expr_box(Literal(I32Literal(v)))),
             TI64Literal(v) => Ok(expr_box(Literal(I64Literal(v)))),
+            TI128Literal(v) => Ok(expr_box(Literal(I128Literal(v)))),
             TF32Literal(v) => Ok(expr_box(Literal(F32Literal(v)))),
             TF64Literal(v) => Ok(expr_box(Literal(F64Literal(v)))),
             TI8Literal(v) => Ok(expr_box(Literal(I8Literal(v)))),
@@ -608,6 +609,10 @@ impl<'t> Parser<'t> {
                 let expr = try!(self.parse_cast(ScalarKind::I64));
                 Ok(expr)
             }
+            TI128 => {
+                let expr = try!(self.parse_cast(ScalarKind::I128));
+                Ok(expr)
+            }
             TF32 => {
                 let expr = try!(self.parse_cast(ScalarKind::F32));
                 Ok(expr)
@@ -1008,6 +1013,7 @@ impl<'t> Parser<'t> {
         match *self.next() {
             TI32 => Ok(Scalar(ScalarKind::I32)),
             TI64 => Ok(Scalar(ScalarKind::I64)),
+            TI128 => Ok(Scalar(ScalarKind::I128)),
             TF32 => Ok(Scalar(ScalarKind::F32)),
             TF64 => Ok(Scalar(ScalarKind::F64)),
             TI8 => Ok(Scalar(ScalarKind::I8)),
@@ -1148,6 +1154,9 @@ fn basic_parsing() {
     let e = parse_expr("i32(10 + 3 + 2)").unwrap();
     assert_eq!(print_expr_without_indent(&e), "(i32(((10+3)+2)))");
 
+    // let e = parse_expr("i128(10X + 3X + 2X)").unwrap();
+    // assert_eq!(print_expr_without_indent(&e), "(i128(((10X+3X)+2X)))");
+
     let e = parse_expr("10 + 64 + i32(10.0)").unwrap();
     assert_eq!(print_expr_without_indent(&e), "((10+64)+(i32(10.0)))");
 
@@ -1160,6 +1169,9 @@ fn basic_parsing() {
     let e = parse_expr("i64(1L:i64)").unwrap();
     assert_eq!(print_expr_without_indent(&e), "(i64(1L))");
 
+    let e = parse_expr("i128(1X:i128)").unwrap();
+    assert_eq!(print_expr_without_indent(&e), "(i128(1X))");
+
     let e = parse_expr("[1, 2+3, 2]").unwrap();
     assert_eq!(print_expr_without_indent(&e), "[1,(2+3),2]");
 
diff --git a/weld/partial_types.rs b/weld/partial_types.rs
index b5af471..4e3c7e7 100644
--- a/weld/partial_types.rs
+++ b/weld/partial_types.rs
@@ -182,6 +182,7 @@ impl PartialExpr {
             Literal(I8Literal(v)) => Literal(I8Literal(v)),
             Literal(I32Literal(v)) => Literal(I32Literal(v)),
             Literal(I64Literal(v)) => Literal(I64Literal(v)),
+            Literal(I128Literal(v)) => Literal(I128Literal(v)),
             Literal(F32Literal(v)) => Literal(F32Literal(v)),
             Literal(F64Literal(v)) => Literal(F64Literal(v)),
             Ident(ref name) => Ident(name.clone()),
diff --git a/weld/pretty_print.rs b/weld/pretty_print.rs
index 8707cb2..fe59be2 100644
--- a/weld/pretty_print.rs
+++ b/weld/pretty_print.rs
@@ -24,6 +24,7 @@ impl PrintableType for Type {
             Scalar(I8) => "i8".to_string(),
             Scalar(I32) => "i32".to_string(),
             Scalar(I64) => "i64".to_string(),
+            Scalar(I128) => "i128".to_string(),
             Scalar(F32) => "f32".to_string(),
             Scalar(F64) => "f64".to_string(),
             Vector(ref elem) => format!("vec[{}]", elem.print()),
@@ -69,6 +70,7 @@ impl PrintableType for PartialType {
             Scalar(I8) => "i8".to_string(),
             Scalar(I32) => "i32".to_string(),
             Scalar(I64) => "i64".to_string(),
+            Scalar(I128) => "i128".to_string(),
             Scalar(F32) => "f32".to_string(),
             Scalar(F64) => "f64".to_string(),
             Vector(ref elem) => format!("vec[{}]", elem.print()),
@@ -430,6 +432,7 @@ pub fn print_literal(lit: &LiteralKind) -> String {
         I8Literal(v) => format!("{}", v),
         I32Literal(v) => format!("{}", v),
         I64Literal(v) => format!("{}L", v),
+        I128Literal(v) => format!("{}X", v),
         F32Literal(v) => {
             let mut res = format!("{}", v);
             // Hack to disambiguate from integers.
diff --git a/weld/resources/prelude.ll b/weld/resources/prelude.ll
index e1c115e..34470a8 100644
--- a/weld/resources/prelude.ll
+++ b/weld/resources/prelude.ll
@@ -70,6 +70,11 @@ define i64 @hash_combine(i64 %seed, i64 %value) {
   ret i64 %6
 }
 
+define i64 @i128.hash(i128 %arg) {
+  %1 = trunc i128 %arg to i64
+  ret i64 %1
+}
+
 define i64 @i64.hash(i64 %arg) {
   ret i64 %arg
 }
@@ -102,6 +107,18 @@ define i64 @double.hash(double %arg) {
 
 ; Comparison functions
 
+define i32 @i128.cmp(i128 %a, i128 %b) {
+  %1 = icmp eq i128 %a, %b
+  br i1 %1, label %eq, label %ne
+eq:
+  ret i32 0
+ne:
+  %2 = icmp slt i128 %a, %b
+  %3 = select i1 %2, i32 -1, i32 1
+  ret i32 %3
+}
+
+
 define i32 @i64.cmp(i64 %a, i64 %b) {
   %1 = icmp eq i64 %a, %b
   br i1 %1, label %eq, label %ne
diff --git a/weld/tokenizer.rs b/weld/tokenizer.rs
index e444a98..d0d605a 100644
--- a/weld/tokenizer.rs
+++ b/weld/tokenizer.rs
@@ -18,6 +18,7 @@ use super::error::*;
 pub enum Token {
     TI32Literal(i32),
     TI64Literal(i64),
+    TI128Literal(i64),
     TF32Literal(f32),
     TF64Literal(f64),
     TI8Literal(i8),
@@ -31,6 +32,7 @@ pub enum Token {
     TMacro,
     TI32,
     TI64,
+    TI128,
     TF32,
     TF64,
     TI8,
@@ -94,7 +96,7 @@ pub fn tokenize(input: &str) -> WeldResult<Vec<Token>> {
         // Regular expressions for various types of tokens.
         static ref KEYWORD_RE: Regex = Regex::new(
             "if|for|zip|len|lookup|keyexists|slice|exp|cudf|iter|merge|result|let|true|false|macro|\
-             i8|i32|i64|f32|f64|bool|vec|appender|merger|vecmerger|dictmerger|groupmerger|\
+             i8|i32|i64|i128|f32|f64|bool|vec|appender|merger|vecmerger|dictmerger|groupmerger|\
              tovec").unwrap();
 
         static ref IDENT_RE: Regex = Regex::new(r"^[A-Za-z$_][A-Za-z0-9$_]*$").unwrap();
@@ -111,6 +113,8 @@ pub fn tokenize(input: &str) -> WeldResult<Vec<Token>> {
         static ref I64_BASE_2_RE: Regex = Regex::new(r"^0b[0-1]+[lL]$").unwrap();
         static ref I64_BASE_16_RE: Regex = Regex::new(r"^0x[0-9a-fA-F]+[lL]$").unwrap();
 
+        static ref I128_BASE_10_RE: Regex = Regex::new(r"^[0-9]+X$").unwrap();
+
         static ref F32_RE: Regex = Regex::new(
             r"[0-9]+\.[0-9]+([eE]-?[0-9]+)?[fF]|[0-9]+([eE]-?[0-9]+)?[fF]").unwrap();
 
@@ -134,6 +138,7 @@ pub fn tokenize(input: &str) -> WeldResult<Vec<Token>> {
                             "macro" => TMacro,
                             "i32" => TI32,
                             "i64" => TI64,
+                            "i128" => TI128,
                             "f32" => TF32,
                             "f64" => TF64,
                             "i8" => TI8,
@@ -177,6 +182,8 @@ pub fn tokenize(input: &str) -> WeldResult<Vec<Token>> {
             tokens.push(try!(parse_i64_literal(text, 2)))
         } else if I64_BASE_16_RE.is_match(text) {
             tokens.push(try!(parse_i64_literal(text, 16)))
+        } else if I128_BASE_10_RE.is_match(text) {
+            tokens.push(try!(parse_i64_literal(text, 10)))
         } else if F32_RE.is_match(text) {
             match f32::from_str(&text[..text.len() - 1]) {
                 Ok(value) => tokens.push(Token::TF32Literal(value)),
@@ -233,6 +240,7 @@ impl fmt::Display for Token {
             // Cases that return variable strings
             TI32Literal(ref value) => write!(f, "{}", value),
             TI64Literal(ref value) => write!(f, "{}L", value),
+            TI128Literal(ref value) => write!(f, "{}X", value),
             TF32Literal(ref value) => write!(f, "{}F", value),
             TF64Literal(ref value) => write!(f, "{}", value),  // TODO: force .0?
             TI8Literal(ref value) => write!(f, "{}C", value),
@@ -245,6 +253,7 @@ impl fmt::Display for Token {
                     // These cases are handled above but repeated here for exhaustive match
                     TI32Literal(_) => "",
                     TI64Literal(_) => "",
+                    TI128Literal(_) => "",
                     TF32Literal(_) => "",
                     TF64Literal(_) => "",
                     TI8Literal(_) => "",
@@ -259,6 +268,7 @@ impl fmt::Display for Token {
                     TMacro => "macro",
                     TI32 => "i32",
                     TI64 => "i64",
+                    TI128 => "i128",
                     TF32 => "f32",
                     TF64 => "f64",
                     TI8 => "i8",
diff --git a/weld/type_inference.rs b/weld/type_inference.rs
index 180ea7c..9dfa799 100644
--- a/weld/type_inference.rs
+++ b/weld/type_inference.rs
@@ -98,6 +98,8 @@ fn infer_locally(expr: &mut PartialExpr, env: &mut TypeMap) -> WeldResult<bool>
 
         Literal(I64Literal(_)) => push_complete_type(&mut expr.ty, Scalar(I64), "I64Literal"),
 
+        Literal(I128Literal(_)) => push_complete_type(&mut expr.ty, Scalar(I128), "I128Literal"),
+
         Literal(F32Literal(_)) => push_complete_type(&mut expr.ty, Scalar(F32), "F32Literal"),
 
         Literal(F64Literal(_)) => push_complete_type(&mut expr.ty, Scalar(F64), "F64Literal"),
